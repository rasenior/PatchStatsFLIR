% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_stats.R
\name{get_stats}
\alias{get_stats}
\title{get_stats}
\usage{
get_stats(img, id = NULL, calc_connectivity = TRUE,
  conn_threshold = 1.5, get_patches = TRUE, style = "C",
  img_proj = NULL, img_extent = NULL, return_vals = c("df",
  "patches", "pstats"), sum_stats = c("mean", "min", "max"))
}
\arguments{
\item{img}{A numeric temperature matrix (such as that returned from
\code{Thermimage::}\code{\link[Thermimage]{raw2temp}}) or raster.}

\item{id}{The image ID (optional). Useful when iterating over numerous images.}

\item{calc_connectivity}{Whether or not to calculate cthermal connectivity
across pixels (slow for large rasters). Defaults to TRUE.}

\item{conn_threshold}{Climate threshold to use for calculation of thermal
connectivity (i.e. the amount of change that organisms would be seeking
to avoid). See \code{ThermStats::}\code{\link{connectivity}}.}

\item{get_patches}{Whether to identify hot and cold spots. Defaults to TRUE.}

\item{style}{Style to use when calculating neighbourhood weights using
\code{spdep::}\code{\link[spdep]{nb2listw}}. Defaults to 'C' (globally 
standardised).}

\item{img_proj}{Spatial projection. Optional, but necessary for geographic
data to plot correctly.}

\item{img_extent}{Spatial extent. Optional, but necessary for geographic
data to plot correctly.}

\item{return_vals}{Which values to return? Any combination of the dataframe
(\code{df}), SpatialPolygonsDataFrame of hot and cold patches
(\code{patches}) and patch statistics dataframe (\code{pstats}). Note that
\code{pstats} will always be returned -- if this is not desired, use
\code{\link{get_patches}} instead.}

\item{sum_stats}{Summary statistics that should be calculated across
all pixels. Several helper functions are included for use here:
\code{\link{perc_5}}, \code{\link{perc_95}},
\code{\link{SHDI}}, \code{\link{SIDI}},
\code{\link{kurtosis}} and \code{\link{skewness}}.}
}
\value{
A list containing:
 \item{df}{A dataframe with one row for each pixel, and variables denoting:
 the pixel value (val); the original spatial location of the pixel (x and y);
 its patch classification (G_bin) into a hot (1), cold (-1) or no patch (0)
 according to the Z value (see \code{spdep::}\code{\link[spdep]{localG}});
 the unique ID of the patch in which the pixel fell;
 and the matrix ID (if applicable).}
 \item{patches}{A SpatialPolygonsDataFrame of hot and cold patches. Hot
 patches have a value of 1, and cold patches a value of -1.}
 \item{pstats}{A dataframe with patch statistics for hot patches and cold
 patches, respectively. See \code{\link{patch_stats}} for details of all the
 statistics returned.}
}
\description{
Calculate summary and spatial statistics across a single matrix or raster.
}
\examples{

# FLIR temperature matrix ---------------------------------------------------

# Define individual matrix and raster
img <- flir11835$flir_matrix
val_raster <- 
    raster::raster(img,
                   xmn=0, xmx=ncol(img),
                   ymn=0, ymx=nrow(img))

# Define image ID (the photo number in this case)
id <- flir11835$photo_no

# Get stats!
get_stats(img = img,
          id = id,
          calc_connectivity = TRUE,
          conn_threshold = 1.5,
          get_patches = TRUE,
          style = "C",
          img_proj = NULL,
          img_extent = NULL,
          return_vals = "pstats",
          sum_stats = c("mean", "min","max"))

get_stats(img = val_raster,
          id = id,
          calc_connectivity = TRUE,
          conn_threshold = 1.5,
          get_patches = TRUE,
          style = "C",
          img_proj = NULL,
          img_extent = NULL,
          return_vals = "pstats",
          sum_stats = c("mean", "min","max"))

# Worldclim2 temperature raster ---------------------------------------------

# Dataset 'sulawesi_temp' represents mean January temperature for the
# island of Sulawesi

# Define projection and extent
img_proj <- projection(sulawesi_temp)
img_extent <- extent(sulawesi_temp)

# Find hot and cold patches
worldclim_results <-
 get_stats(img = sulawesi_temp,
           id = "sulawesi",
           calc_connectivity = FALSE,
           style = "C",
           img_proj = img_proj,
           img_extent = img_extent,
           return_vals = c("df", "patches", "pstats"),
           sum_stats = c("mean", "min","max"))

# Plot!
df <- worldclim_results$df
patches <- worldclim_results$patches
plot_patches(df, patches, print_plot = TRUE, save_plot = FALSE)
}
