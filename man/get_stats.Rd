% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_stats.R
\name{get_stats}
\alias{get_stats}
\title{get_stats}
\usage{
get_stats(val_mat, matrix_id = NULL, calc_connectivity = TRUE,
  conn_threshold = 1.5, get_patches = TRUE, k = 8, style = "W",
  mat_proj = NULL, mat_extent = NULL, return_vals = c("df",
  "patches", "pstats"), sum_stats = c("mean", "min", "max"))
}
\arguments{
\item{val_mat}{A numeric matrix or raster.}

\item{matrix_id}{The matrix ID (optional). Useful when iterating over numerous matrices.}

\item{get_patches}{Whether to identify hot and cold spots. Defaults to TRUE.}

\item{k}{Number of neighbours to use when calculating nearest neighbours
using \code{spdep::}\code{\link[spdep]{knearneigh}}.}

\item{style}{Style to use when calculating neighbourhood weights using
\code{spdep::}\code{\link[spdep]{nb2listw}}.}

\item{mat_proj}{Spatial projection. Optional, but necessary for geographic
data to plot correctly.}

\item{mat_extent}{Spatial extent. Optional, but necessary for geographic
data to plot correctly.}

\item{return_vals}{Which values to return? Any combination of the dataframe
(\code{df}), SpatialPolygonsDataFrame of hot and cold patches
(\code{patches}) and patch statistics dataframe (\code{pstats}). Note that
\code{pstats} will always be returned -- if this is not desired, use
\code{\link{get_patches}} instead.}

\item{pixel_fns}{The names of the summary statistics to apply.}

\item{...}{Use to specify summary statistics that should be calculated across
all pixels. Several helper functions are included for use here:
\code{\link{perc_5}}, \code{\link{perc_95}},
\code{\link{SHDI}}, \code{\link{SIDI}},
\code{\link{kurtosis}} and \code{\link{skewness}}.}
}
\value{
A list containing:
 \item{df}{A dataframe with one row for each pixel, and variables denoting:
 the pixel value (val); the original spatial location of the pixel (x and y);
 its patch classification (G_bin) into a hot (1), cold (-1) or no patch (0)
 according to the Z value (see \code{spdep::}\code{\link[spdep]{localG}});
 the unique ID of the patch in which the pixel fell;
 and the matrix ID (if applicable).}
 \item{patches}{A SpatialPolygonsDataFrame of hot and cold patches. Hot
 patches have a value of 1, and cold patches a value of -1.}
 \item{pstats}{A dataframe with patch statistics for hot patches and cold
 patches, respectively. See \code{\link{patch_stats}} for details of all the
 statistics returned.}
}
\description{
Calculate summary and spatial statistics across a single matrix or raster.
}
\examples{

# FLIR temperature matrix ---------------------------------------------------

# Define individual matrix and raster
val_mat <- flir11835$flir_matrix
val_raster <- raster::raster(val_mat)

# Define matrix ID (the photo number in this case)
matrix_id <- flir11835$photo_no

# Get stats!
get_stats(val_mat = val_mat,
          matrix_id = matrix_id,
          calc_connectivity = TRUE,
          conn_threshold = 1.5,
          get_patches = TRUE,
          k = 8,
          style = "W",
          mat_proj = NULL,
          mat_extent = NULL,
          return_vals = "pstats",
          sum_stats = c("mean", "min","max"))
get_stats(val_mat = val_raster,
          matrix_id = matrix_id,
          calc_connectivity = TRUE,
          conn_threshold = 1.5,
          get_patches = TRUE,
          k = 8,
          style = "W",
          mat_proj = NULL,
          mat_extent = NULL,
          return_vals = "pstats",
          sum_stats = c("mean", "min","max"))

# Worldclim2 temperature raster ---------------------------------------------

# Dataset 'sulawesi_temp' represents mean January temperature for the
# island of Sulawesi

# Define projection and extent
mat_proj <- projection(sulawesi_temp)
mat_extent <- extent(sulawesi_temp)

# Find hot and cold patches
worldclim_results <-
 get_stats(val_mat = sulawesi_temp,
           matrix_id = "sulawesi",
           calc_connectivity = FALSE,
           k = 8,
           style = "W",
           mat_proj = mat_proj,
           mat_extent = mat_extent,
           return_vals = c("df", "patches", "pstats"),
           sum_stats = c("mean", "min","max"))

# Plot!
df <- worldclim_results$df
patches <- worldclim_results$patches
plot_patches(df, patches, print_plot = TRUE, save_plot = FALSE)
}
