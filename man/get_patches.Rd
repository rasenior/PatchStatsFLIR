% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_patches.R
\name{get_patches}
\alias{get_patches}
\title{get_patches}
\usage{
get_patches(img, id = NULL, style = "C", img_proj = NULL,
  img_extent = NULL, return_vals = c("df", "patches", "pstats"))
}
\arguments{
\item{img}{A numeric temperature matrix (such as that returned from
\code{Thermimage::}\code{\link[Thermimage]{raw2temp}}) or raster.}

\item{id}{The image ID (optional). Useful when iterating over
numerous images.}

\item{style}{Style to use when calculating neighbourhood weights using
\code{spdep::}\code{\link[spdep]{nb2listw}}. Defaults to 'C' (globally 
standardised).}

\item{img_proj}{Spatial projection. Optional, but necessary for geographic
data to plot correctly.}

\item{img_extent}{Spatial extent. Optional, but necessary for geographic
data to plot correctly.}

\item{return_vals}{Which values to return? Any combination of the dataframe
(\code{df}), SpatialPolygonsDataFrame of hot and cold patches
(\code{patches}) and patch statistics dataframe (\code{pstats}).}
}
\value{
A list containing:
 \item{df}{A dataframe with one row for each pixel, and variables denoting:
 the pixel value (val); the spatial location of the pixel (x and y);
 its patch classification (G_bin) into a hot (1), cold (-1) or no patch (0)
 according to the Z value (see \code{spdep::}\code{\link[spdep]{localG}});
 the unique ID of the patch in which the pixel fell;
 the image ID (if applicable); and the original spatial location of the pixel 
 (x_orig and y_orig).}
 \item{patches}{A SpatialPolygonsDataFrame of hot and cold patches, named
 according to \code{id} (if applicable). Hot patches have a value of 1, 
 and cold patches a value of -1.}
 \item{pstats}{A dataframe with patch statistics for hot patches and cold
 patches, respectively. See \code{\link{patch_stats}} for details of all the
 statistics returned.}
}
\description{
Find hot and cold patches in a numeric matrix or raster, and calculate patch statistics.
}
\examples{

\dontrun{
# FLIR temperature matrix ----------------------------------------
# Find hot and cold patches
flir_results <-
    get_patches(img = flir11835$flir_matrix,
                id = flir11835$photo_no)

# Look at the results for individual pixels
head(flir_results$df)

# Look at the patch statistics for hot and cold patches
flir_results$pstats

# Plot the patches
sp::plot(flir_results$patches)

# Plot using ThermStats::plot_patches
plot_patches(df = flir_results$df,
             patches = flir_results$patches,
             print_plot = TRUE,
             save_plot = FALSE)
             
# Plot using landscapemetrics package
flir_patch_rast <- raster::rasterFromXYZ(flir_results$df[,c("x", "y", "G_bin")]) 
if (requireNamespace("landscapemetrics", quietly = TRUE)){
    show_landscape(flir_patch_rast)
    show_patches(flir_patch_rast, class = "all", labels = FALSE)
    show_cores(flir_patch_rast, class = c(1, -1), labels = FALSE)
}

# Worldclim2 temperature raster ----------------------------------
# Dataset 'sulawesi_temp' represents mean January temperature for 
# the island of Sulawesi

# Define projection and extent
img_proj <- raster::projection(sulawesi_temp)
img_extent <- raster::extent(sulawesi_temp)

# Find hot and cold patches
worldclim_results <-
 get_patches(img = sulawesi_temp,
             id = "sulawesi",
             img_proj = img_proj,
             img_extent = img_extent)

# Look at the results for individual pixels
head(worldclim_results$df)

# Look at the patch statistics for hot and cold patches
worldclim_results$pstats

# Plot the patches
sp::plot(worldclim_results$patches)

# Plot using ThermStats::plot_patches
plot_patches(df = worldclim_results$df,
             patches = worldclim_results$patches,
             print_plot = TRUE,
             save_plot = FALSE)
}

}
